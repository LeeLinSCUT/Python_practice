HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。(HEAD^^)
$ git reset HEAD readme.txt   命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

电脑里能看到的目录就是一个工作区，.git是Git的版本库。版本库里面有暂存区（stage），还有Git为我们自动创建的第一个分支master，以及指向
master的一个指针HEAD。

第一步用git add把文件添加到暂存区。 第二步是用Git commit提交更改，把暂存区的所有内容提交到当前分支。

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：其实是用版本库里的版本替换工作区的版本

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。
分支文件都是需要提交的
$ git switch -c dev #git switch命令加上-b参数表示创建并切换dev分支
$ git branch #查看分支
$ git swtich master #切换回master分支  
$ git merge dev  #把dev分支的工作成果合并到master分支上： 合并某分支到当前分支
$ git branch -d feature1 #删除分支
$ git merge --no-ff -m "merge with no-ff" dev  #本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
因为这次合并对master来说就是一次commit，如果使用了fast foward模式，只是把Head转移到dev上。
$ git stash  可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作 此时还没有提交该分支
$ git stash list #查看储存的工作现场
$ git stash pop #恢复的同时把stash内容也删了


但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
$ git checkout -b dev origin/dev #建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支
先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream-to=origin/dev dev
