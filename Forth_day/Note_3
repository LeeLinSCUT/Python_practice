(1)错误处理
  当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块，
  执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完毕。
  由于没有错误发生，所以except语句块不会被执行，但是finally如果有，则一定会被执行（可以没有finally语句）。
  可以有多个except来捕获不同类型的错误：Python的错误其实也是class，所有的错误类型都继承自BaseException
  try:
    print('try...')
    r = 10 / int('a')
    print('result:', r)
  except ValueError as e:
    print('ValueError:', e)
  except ZeroDivisionError as e:
    print('ZeroDivisionError:', e)
  finally:
    print('finally...')
  print('END')
(2）抛出错误 Raise
  Python的错误其实也是class，所有的错误类型都继承自BaseException
(3)断言
  assert 表达式 ' '
(4)logging 
import logging
logging.basicConfig(level=logging.INFO) #指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，
logging.debug就不起作用
logging.info()就可以输出一段文本
