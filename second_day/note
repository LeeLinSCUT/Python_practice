(1)切片
    作用于list或tuple或字符串
    >>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack'] L[0:3]即是切片操作，取0到1到2的list或者tuple元素。也可以取负数，想象元素是中心对称到负半轴上的。
    如果index的数值是0的话，可以省略[index1:index2:step] index1空的时候默认为0，index2空的时候默认为最后一个元素。  
（2）变量与对象(函数传参问题）
    python中一切数据都为对象，而每个对象都有相对应的一个引用（引用存储的应该是数据的内存地址）
    变量本身没有类型信息，类型信息存储在对象中，这和C/C++中的变量有非常大的出入。准确来说函数传的是对象，会以新的参数名建立一个新的变量，如果对
    这个新的变量重新幅值的话，会分配一个新的对象给他。传入的对象不会受到改变。但是如果你不改变新的变量的指向方向进行操作，就会改变操作。
（3）迭代
    list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代。
    可以通过collections模块的iteralble类型判断。使用isinstance()函数。
（4）默认参数调用
    函数定义好之后，默认参数 a_list 就会指向（绑定）到一个空列表对象，每次调用函数时，都是对同一个对象进行 append 操作。
    因此这样写就会有潜在的bug，同样的调用方式返回了不一样的结果。
（5）列表生成式（list Comprehensions)
   [ 表达式 + for 变量 in list/dict/str 条件语句] 最后生成的也是list。
    写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来。
    >>> [x * x for x in range(1, 11) if x % 2 == 0]
    还可以使用两层循环，可以生成全排列：
    >>> [m + n for m in 'ABC' for n in 'XYZ']
    >>> for k, v in d.items():
...     print(k, '=', v) #有点像是k取了dic的第一列，v取了dic的第二列。
(6)生成器
    一个列表的元素可能很多，如果列表的元素之间有一定的联系，在你使用前几个元素的时候就可以推出后续的元素的话。就可以在循环的过程中不断推算出后续的元素。
    这样就不必创建完整的list。generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值。
    把一个列表生成式的[]改成()，如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator。
    #像是生成的列表过程中给generator卡在中间了（yield的地方），每次要继续走到下一步的时候，就需要重新迭代一次。迭代完了就会触发StopIteration错误。
    我们常用for循环来进行迭代，从而获取下一个返回值。比如
    for n in fib(6): #每次迭代的值会给n 即是函数里需要 yield 迭代值
    print(n)
    但是这样fib（6）的返回值就截取不到了。必须捕获stopIteration错误。
（7）迭代对象
    可以直接作用于for循环的对象统称为可迭代对象。可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。
    一类是集合数据类型，如list、tuple、dict、set、str等；
    一类是generator，包括生成器和带yield的generator function。
    Python的for循环本质上就是通过不断调用next()函数实现的，例如：
（8）高阶函数
    函数名其实就是指向函数的变量，如果将此变量传入另外一个函数的参数，另外一个函数就是高阶函数。
（9）map/reduce
    map(function,iterable),将传入的函数依次作用于序列的每个元素，把结果作为新的Iterator返回（？），是一个惰性序列。
    reduce(function,iterable)中的函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算。
 
